generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @unique @default(uuid()) @db.Uuid
  email      String   @unique
  password   String
  role       userRole @default(USER)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Admin      Admin?
  Brand      Brand?
  Shopper    Shopper?
  blackList  blackList?
}

model Admin {
  id          String    @id @unique @default(uuid()) @db.Uuid
  user_id     String    @unique @db.Uuid
  username    String    @unique
  user        User      @relation(fields: [user_id], references: [id])
  role        adminRole
}

model Shopper {
  id                String           @id @unique @default(uuid()) @db.Uuid
  user_id           String           @unique @db.Uuid
  firstName         String
  lastName          String
  username          String           @unique
  age               Int
  gender            gender
  phone             String           @unique
  image             String?
  city              String?
  preferences       Json?
  avatar            Avatar?
  bodyMeasurement   BodyMeasurement?
  following         Brand_Shopper[]
  cart              Cart?
  chats             Chat[]
  messages_received Message[]        @relation("ReceivedMessages")
  messages_sent     Message[]        @relation("SentMessages")
  orders            Order[]
  reviews           Review[]
  liked_reviews     Review_Shopper[]
  user              User             @relation(fields: [user_id], references: [id])
  wishlist          Wishlist?
}

model Brand {
  id           String          @id @unique @default(uuid()) @db.Uuid
  user_id      String          @unique @db.Uuid
  name         String          @unique
  rating       Float?
  rated_status Boolean         @default(false)
  phone        String?         @unique
  description  String
  logo         String?
  facebook     String?
  instagram    String?
  website      String?
  user         User            @relation(fields: [user_id], references: [id])
  followers    Brand_Shopper[]
  products     Product[]
  sizes        Size[]

  @@index([name])
}

model blackList {
  id            String      @id @unique @default(uuid()) @db.Uuid
  user_id       String      @db.Uuid @unique
  comment       String?
  created_at    DateTime    @default(now())
  user          User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Brand_Shopper {
  id       String  @id @unique @default(uuid()) @db.Uuid
  brand_id String  @db.Uuid
  user_id  String  @db.Uuid
  brand    Brand   @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  user     Shopper @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([brand_id, user_id])
}

model Product {
  id              String           @id @unique @default(uuid()) @db.Uuid
  brand_id        String           @db.Uuid
  category_id     String           @db.Uuid
  name            String
  price           Float
  description     String?
  discount        Float?
  rating          Float?
  rated_status    Boolean          @default(false)
  material        String
  returnPeriod    Int?
  inStock         Boolean          @default(true)
  image           String?
  created_at      DateTime         @default(now())
  sold_items      Int              @default(0)
  approved        Boolean          @default(true)
  brand           Brand            @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  category        Category         @relation(fields: [category_id], references: [id])
  offers          Offers?
  images          ProductImage[]
  productVariants ProductVariant[]
  colours         Product_Colour[]
  tags            Product_Tag[]
  reviews         Review[]
  wishlistItems   WishlistItem[]
  productMessages productMessage[]

  @@index([brand_id])
}

model ProductImage {
  id         String  @id @unique @default(uuid()) @db.Uuid
  product_id String  @db.Uuid
  image      String
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id         String      @id @unique @default(uuid()) @db.Uuid
  product_id String      @db.Uuid
  size_id    String      @db.Uuid
  quantity   Int
  cartItems  CartItem[]
  orderItems OrderItem[]
  product    Product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  size       Size        @relation(fields: [size_id], references: [id])

  @@unique([product_id, size_id])
}

model Category {
  id       String           @id @unique @default(uuid()) @db.Uuid
  name     CategoryFamilies
  style    String
  products Product[]
  sizes    Size[]

  @@unique([name, style])
}

model Size {
  id             String           @id @unique @default(uuid()) @db.Uuid
  brand_id       String           @db.Uuid
  category_id    String           @db.Uuid
  size           SizeTag
  waist          Int?
  length         Int?
  chest          Int?
  arm_length     Int?
  bicep          Int?
  foot_length    Int?
  productVariant ProductVariant[]
  brand          Brand            @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  category       Category         @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@unique([brand_id, category_id, size])
}

model Colour {
  id       String           @id @unique @default(uuid()) @db.Uuid
  name     String           @unique
  family   ColourFamily
  hex      String           @unique
  products Product_Colour[]

  @@index([family])
}

model Product_Colour {
  id         String  @id @unique @default(uuid()) @db.Uuid
  product_id String  @db.Uuid
  colour_id  String  @db.Uuid
  percentage Int?
  colour     Colour  @relation(fields: [colour_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([product_id, colour_id])
}

model Product_Tag {
  id         String  @id @unique @default(uuid()) @db.Uuid
  product_id String  @db.Uuid
  tag_id     String  @db.Uuid
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  tag        Tag     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([product_id, tag_id])
}

model Tag {
  id       String        @id @unique @default(uuid()) @db.Uuid
  name     String        @unique
  products Product_Tag[]
}

model Order {
  id           String      @id @unique @default(uuid()) @db.Uuid
  user_id      String      @db.Uuid
  order_status OrderStatus
  total_cost   Float       @default(0)
  longitude    String      @default("0")
  latitude     String      @default("0")
  created_at   DateTime    @default(now())
  purchased_at DateTime?
  user         Shopper     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items        OrderItem[]
}

model OrderItem {
  id         String         @id @unique @default(uuid()) @db.Uuid
  order_id   String         @db.Uuid
  product_id String         @db.Uuid
  quantity   Int            @default(1)
  order      Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product    ProductVariant @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Cart {
  id         String     @id @unique @default(uuid()) @db.Uuid
  user_id    String     @unique @db.Uuid
  total_cost Float      @default(0)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  user       Shopper    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items      CartItem[]
}

model CartItem {
  id         String         @id @unique @default(uuid()) @db.Uuid
  cart_id    String         @db.Uuid
  product_id String         @db.Uuid
  quantity   Int            @default(1)
  cart       Cart           @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product    ProductVariant @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Wishlist {
  id         String         @id @unique @default(uuid()) @db.Uuid
  user_id    String         @unique @db.Uuid
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  user       Shopper        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items      WishlistItem[]
}

model WishlistItem {
  id          String   @id @unique @default(uuid()) @db.Uuid
  wishlist_id String   @db.Uuid
  product_id  String   @db.Uuid
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  wishlist    Wishlist @relation(fields: [wishlist_id], references: [id], onDelete: Cascade)
}

model Review {
  id                 String           @id @unique @default(uuid()) @db.Uuid
  user_id            String           @db.Uuid
  product_id         String           @db.Uuid
  rating             Float
  comment            String
  created_at         DateTime         @default(now())
  accuracy_rate      Float            @default(0)
  image              String?
  quality_rate       Float            @default(0)
  shipping_rate      Float            @default(0)
  updated_at         DateTime         @updatedAt
  valueForMoney_rate Float            @default(0)
  product            Product          @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user               Shopper          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  likes              Review_Shopper[]
}

model Review_Shopper {
  id        String  @id @unique @default(uuid()) @db.Uuid
  user_id   String  @db.Uuid
  review_id String  @db.Uuid
  review    Review  @relation(fields: [review_id], references: [id], onDelete: Cascade)
  user      Shopper @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, review_id])
}

model BodyMeasurement {
  id             String  @id @unique @default(uuid()) @db.Uuid
  user_id        String  @unique @db.Uuid
  waist          Int
  height         Int
  weight         Int
  chest          Int
  shoulder_width Int
  shape          String
  foot_length    Int?
  user           Shopper @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Avatar {
  id              String   @id @unique @default(uuid()) @db.Uuid
  user_id         String   @unique @db.Uuid
  topType         Int      @default(0)
  accessoriesType Int      @default(0)
  hairColor       Int      @default(0)
  facialHairType  Int      @default(0)
  facialHairColor Int      @default(0)
  clotheType      Int      @default(0)
  eyeType         Int      @default(0)
  eyebrowType     Int      @default(0)
  mouthType       Int      @default(0)
  skinColor       Int      @default(0)
  clotheColor     Int      @default(0)
  style           Int      @default(0)
  graphicType     Int      @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user            Shopper  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Chat {
  id         String    @id @unique @default(uuid()) @db.Uuid
  user_id    String    @db.Uuid
  created_at DateTime  @default(now())
  user       Shopper   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  messages   Message[]
}

model Message {
  id          String           @id @unique @default(uuid()) @db.Uuid
  sender_id   String?          @db.Uuid
  receiver_id String?          @db.Uuid
  chat_id     String           @db.Uuid
  text        String?
  file        String?
  created_at  DateTime         @default(now())
  chat        Chat             @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  receiver    Shopper?         @relation("ReceivedMessages", fields: [receiver_id], references: [id], onDelete: Cascade)
  sender      Shopper?         @relation("SentMessages", fields: [sender_id], references: [id], onDelete: Cascade)
  products    productMessage[]
}

model productMessage {
  id         String  @id @unique @default(uuid()) @db.Uuid
  product_id String  @db.Uuid
  message_id String  @db.Uuid
  image      String
  message    Message @relation(fields: [message_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([product_id, message_id])
}

model Offers {
  id            String      @id @unique @default(uuid()) @db.Uuid
  product_id    String      @db.Uuid @unique
  discount      Float
  prev_discount Float
  list_number   Int
  image         String?
  start_date    DateTime    @default(now())
  end_date      DateTime
  product       Product      @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

// ------------------------------- Enums -------------------------------

enum adminRole {
  // General roles
  CustomerService
  BrandManager

  // Administrative roles
  SystemAdmin
  SuperAdmin
}

enum userRole {
  USER
  ADMIN
  BRAND
}

enum Shape {
  RECTANGLE
  TRIANGLE
  INVERTED_TRIANGLE
  HOURGLASS
  OVAL
}

enum SizeTag {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
  XXXXL
  XXXXXL
}

enum gender {
  male
  female
}

enum ColourFamily {
  Red
  Orange
  Yellow
  Green
  Blue
  Purple
  Pink
  Brown
  Beige
  Gray
  White
  Black
}

enum CategoryFamilies {
  Shirts
  Pants
  Shoes
  Accessories
  Bags
  Dresses
  Skirts
  Jackets
  Sweaters
  Hoodies
  Bag
  Hat
  Shorts
}

enum OrderStatus {
  CANCELLED
  PENDING
  CONFIRMED
  DELIVERING
  COMPLETED
}


// Note: unused
enum CategoryStyles {
  // Shirts
  round
  v_neck
  slim_fit
  oversized
  button_up
  collared
  scoop_neck
  turtleneck
  casual

  // Pants
  skinny
  straight_leg
  bootcut
  wide_leg
  jogger
  cargo
  high_waisted
  flare

  // Dresses
  mini
  midi
  maxi
  wrap
  bodycon
  A_line
  shift
  sheath

  // Jackets
  bomber
  denim
  leather
  parka
  blazer
  trench
  puffer
  windbreaker

  // Sweaters
  crewneck
  //v_neck
  cardigan
  //turtleneck
  pullover
  zip_up
  //oversized
  fitted

  // Hoodies
  //pullover
  //zip_up
  //oversized
  //fitted
  cropped
  hooded
  sweatshirt
  sweatpants

  // Skirts
  //mini
  //midi
  //maxi
  pencil
  //A_line
  pleated
  //wrap
  circle

  // Shorts
  //denim
  //cargo
  chino
  biker
  bermuda
  //high_waisted
  athletic
  tailored

  // Shoes
  sneakers
  loafers
  heels
  boots
  sandals
  flats
  wedges
  slippers

  // Bag
  tote
  backpack
  clutch
  crossbody
  satchel
  hobo
  messenger
  duffel

  // Hat
  beanie
  cap
  fedora
  bucket
  beret
  visor
  panama
  wide_brim

  // Accessories
  belt
  scarf
  gloves
  sunglasses
  watch
  jewelry
  hair_clip
  bracelet
}